import flixel.util.FlxTimer;
import funkin.Conductor;
import funkin.input.PreciseInputManager;
import funkin.modding.events.ScriptEvent;
import funkin.modding.module.Module;
import funkin.play.PlayState;
import funkin.play.scoring.Scoring;
import funkin.play.stage.Stage;
import funkin.util.Constants;

/**
 * A module that automatically presses notes
 * in PlayState with perfect timing.
 *
 * @author M&M
 */
class AutoplayModule extends Module
{
  function new()
  {
    super("AutoplayModule");
  }

  var playerNotes:Array<SongNoteData> = [];
  var holdData:Array<Float> = [0, 0, 0, 0];

  override function onSongLoaded(event:SongLoadScriptEvent)
  {
    super.onSongLoaded(event);

    var state:PlayState = PlayState.instance;

    if (state != null && !state.isBotPlayMode)
    {
      state.isPracticeMode = true;

      playerNotes = [];
      holdData = [0, 0, 0, 0];

      for (note in event.notes)
      {
        if (note.getMustHitNote())
        {
          playerNotes.push(note);
        }
      }
    }
  }

  override function onUpdate(event:ScriptEvent):Void
  {
    super.onUpdate(event);

    var state:PlayState = PlayState.instance;

    if (playerNotes.length > 0 && state != null && !state.isGamePaused && !state.isBotPlayMode)
    {
      var pressQueue:Array<PreciseInputEvent> = state.inputPressQueue;
      var releaseQueue:Array<PreciseInputEvent> = state.inputReleaseQueue;

      for (note in playerNotes)
      {
        if (Conductor.instance.songPosition >= note.time)
        {
          if (holdData[note.data] == 0)
          {
            pressQueue.push({noteDirection: note.data, timestamp: PreciseInputManager.getCurrentTimestamp()});
          }

          if (note.length == 0 || holdData[note.data] >= note.length)
          {
            holdData[note.data] = 0;
            playerNotes.remove(note);

            new FlxTimer().start(0.1, function(timer:FlxTimer)
            {
              releaseQueue.push({noteDirection: note.data, timestamp: PreciseInputManager.getCurrentTimestamp()});
            });
          }
          else
          {
            holdData[note.data] += (event.elapsed * Constants.MS_PER_SEC);

            var stage:Stage = state.currentStage;

            if (stage != null && stage.getBoyfriend() != null && stage.getBoyfriend().isSinging())
            {
              stage.getBoyfriend().holdTimer = 0;
            }
          }
        }
      }
    }
  }
}
