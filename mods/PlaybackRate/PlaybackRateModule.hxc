import Std;
import flixel.FlxG;
import flixel.util.FlxSave;
import funkin.modding.events.ScriptEvent;
import funkin.modding.module.Module;
import funkin.play.PlayState;
import funkin.play.scoring.Scoring;
import funkin.ui.options.OptionsState;

/**
 * A module that changes various values to recreate the
 * Playback Rate feature that is present in various FNF engines.
 *
 * @author M&M
 */
class PlaybackRateModule extends Module
{
  var save:FlxSave = null;
  var timeScale:Float = 1.0;
  var adjustScroll:Bool = true;

  function bindSave():Void
  {
    if (save == null)
    {
      save = new FlxSave();
      save.bind("PlaybackRate", "MandM");
    }
  }

  function closeSave():Void
  {
    if (save != null)
    {
      save.close();
      save = null;
    }
  }

  function new():Void
  {
    super("PlaybackRateModule");

    bindSave();

    if (save.data.timeScale == null)
    {
      save.data.timeScale = 100;
    }

    if (save.data.adjustScroll == null)
    {
      save.data.adjustScroll = true;
    }

    timeScale = save.data.timeScale / 100;
    adjustScroll = save.data.adjustScroll;

    closeSave();
  }

  function adjustTimeScale(scale:Float):Void
  {
    FlxG.timeScale = scale;

    // PBOT1 (Points Based On Timing v1)
    Scoring.PBOT1_PERFECT_THRESHOLD = 5.0 * scale;
    Scoring.PBOT1_MISS_THRESHOLD = 160.0 * scale;
    Scoring.PBOT1_KILLER_THRESHOLD = 12.5 * scale;
    Scoring.PBOT1_SICK_THRESHOLD = 45.0 * scale;
    Scoring.PBOT1_GOOD_THRESHOLD = 90.0 * scale;
    Scoring.PBOT1_BAD_THRESHOLD = 135.0 * scale;
    Scoring.PBOT1_SHIT_THRESHOLD = 160.0 * scale;

    // Legacy
    Scoring.LEGACY_HIT_WINDOW = 166.66666666666666 * scale;
    Scoring.LEGACY_SICK_THRESHOLD = 0.2 * scale;
    Scoring.LEGACY_GOOD_THRESHOLD = 0.75 * scale;
    Scoring.LEGACY_BAD_THRESHOLD = 0.9 * scale;
    Scoring.LEGACY_SHIT_THRESHOLD = 1.0 * scale;

    // Week 7
    Scoring.WEEK7_HIT_WINDOW = Scoring.LEGACY_HIT_WINDOW;
    Scoring.WEEK7_BAD_THRESHOLD = 0.8 * scale;
    Scoring.WEEK7_GOOD_THRESHOLD = 0.55 * scale;
    Scoring.WEEK7_SICK_THRESHOLD = 0.2 * scale;

    if (PlayState.instance != null)
    {
      PlayState.instance.playbackRate = scale;
    }
  }

  override function onCreate(event:ScriptEvent):Void
  {
    adjustTimeScale(1.0);
    super.onCreate(event);
  }

  override function onStateChangeEnd(event:StateChangeScriptEvent):Void
  {
    var isPlayState:Bool = Std.isOfType(event.targetState, PlayState);
    var isOptions:Bool = Std.isOfType(event.targetState, OptionsState);

    adjustTimeScale(isPlayState ? timeScale : 1.0);

    if (isOptions)
    {
      bindSave();

      var prefs = event.targetState.pages.get("preferences");

      prefs.createPrefItemPercentage("Playback Rate", "", function(value)
      {
        save.data.timeScale = value;
        timeScale = value / 100;
      }, save.data.timeScale, 50, 300);

      prefs.createPrefItemCheckbox("Adjust Scroll", "", function(value)
      {
        save.data.adjustScroll = value;
        adjustScroll = value;
      }, save.data.adjustScroll);
    }
    else
    {
      closeSave();
    }

    super.onStateChangeEnd(event);
  }

  override function onSongLoaded(event:SongLoadScriptEvent):Void
  {
    adjustTimeScale(timeScale);

    if (adjustScroll)
    {
      PlayState.instance.currentChart.scrollSpeed /= timeScale;
    }

    super.onSongLoaded(event);
  }

  override function onPause(event:PauseScriptEvent):Void
  {
    adjustTimeScale(1.0);
    super.onPause(event);
  }

  override function onResume(event:ScriptEvent):Void
  {
    adjustTimeScale(timeScale);
    super.onResume(event);
  }

  override function onSongEnd(event:ScriptEvent):Void
  {
    adjustTimeScale(1.0);
    super.onSongEnd(event);
  }

  override function onGameOver(event:ScriptEvent):Void
  {
    adjustTimeScale(1.0);
    super.onGameOver(event);
  }

  override function onSongRetry(event:ScriptEvent):Void
  {
    if (adjustScroll)
    {
      PlayState.instance.currentChart.scrollSpeed *= timeScale;
    }

    super.onSongRetry(event);
  }

  override function onDestroy(event:ScriptEvent):Void
  {
    adjustTimeScale(1.0);

    if (adjustScroll && PlayState.instance != null)
    {
      PlayState.instance.currentChart.song.cacheCharts(true);
    }

    super.onDestroy(event);
  }
}
