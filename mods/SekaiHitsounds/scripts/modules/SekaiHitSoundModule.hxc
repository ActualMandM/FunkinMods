import Std;
import flixel.FlxG;
import flixel.util.FlxSave;
import funkin.Paths;
import funkin.audio.FunkinSound;
import funkin.modding.events.ScriptEvent;
import funkin.modding.module.Module;
import funkin.play.PlayState;
import funkin.ui.options.OptionsState;

/**
 * A module that plays a sound whenever a note is hit.
 *
 * @author M&M
 */
class SekaiHitSoundModule extends Module
{
  var HITSOUNDS = [
    "perfect" => "perfect",
    "killer" => "perfect", // https://youtu.be/BSi88nRijoA
    "sick" => "perfect",
    "good" => "great",
    "bad" => "good",
    "shit" => "good"
  ];

  var save:FlxSave = null;
  var folder:String = "sekai01";
  var volume:Float = 0.8;

  function bindSave():Void
  {
    if (save == null)
    {
      save = new FlxSave();
      save.bind("SekaiHitSound", "MandM");
    }
  }

  function closeSave():Void
  {
    if (save != null)
    {
      save.close();
      save = null;
    }
  }

  function new():Void
  {
    super("SekaiHitSoundModule");

    bindSave();

    if (save.data.folder == null)
    {
      save.data.folder = "sekai01";
    }

    if (save.data.volume == null)
    {
      save.data.volume = 80;
    }

    folder = save.data.folder;
    volume = save.data.volume / 100;

    closeSave();
  }

  function onStateChangeEnd(event):Void
  {
    var isPlayState:Bool = Std.isOfType(event.targetState, PlayState);
    var isOptions:Bool = Std.isOfType(event.targetState, OptionsState);

    if (isOptions)
    {
      bindSave();

      var prefs = event.targetState.optionsCodex.pages.get("preferences");

      prefs.createPrefItemEnum("Hitsound Type", "Change what the hitsound sounds like.",
      [
        "Sekai #1" => "sekai01",
        "Sekai #2" => "sekai02"
      ],
      function(value)
      {
        save.data.folder = value;
        folder = value;
      }, save.data.folder);

      prefs.createPrefItemPercentage("Hitsound Volume", "Change the loudness of the hitsound.", function(value)
      {
        save.data.volume = value;
        volume = value / 100;
      }, save.data.volume);
    }
    else
    {
      closeSave();

      if (isPlayState)
      {
        for (audio in HITSOUNDS)
        {
          FlxG.sound.cache(Paths.sound(getHitSoundPath(audio)));
        }
      }
    }

    super.onStateChangeEnd(event);
  }

  override function onNoteHit(event:HitNoteScriptEvent):Void
  {
    super.onNoteHit(event);

    if (PlayState.instance == null || !event.note.noteData.getMustHitNote() || !HITSOUNDS.exists(event.judgement))
    {
      return;
    }

    FunkinSound.playOnce(Paths.sound(getHitSoundPath(HITSOUNDS.get(event.judgement))), volume);
  }

  function getHitSoundPath(type:String = "perfect"):String
  {
    return 'hitsound/' + folder + '/' + type;
  }
}
